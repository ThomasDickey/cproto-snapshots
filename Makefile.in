# $Id: Makefile.in,v 4.12 2008/01/01 23:21:43 tom Exp $
#
# UNIX template-makefile for C prototype generator

THIS = cproto
RELEASE = 4_7e

#### Start of system configuration section. ####

srcdir = @srcdir@
VPATH  = @srcdir@

CC		= @CC@
CPP		= @CPP@
LEX		= @LEX@
YACC		= @YACC@
LINT		= @LINT@

INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@

DEFINES		=
EXTRA_CFLAGS	= @EXTRA_CFLAGS@
CPPFLAGS	= -I. -I$(srcdir) $(DEFINES) -DHAVE_CONFIG_H @CPPFLAGS@
CFLAGS		= @CFLAGS@ $(CPPFLAGS) $(EXTRA_CFLAGS)
LIBS		= @LIBS@ @LEXLIB@

prefix		= @prefix@
exec_prefix	= @exec_prefix@

bindir		= @bindir@
mandir		= @mandir@/man1
manext		= 1

x		= @EXEEXT@
o		= .@OBJEXT@

#### End of system configuration section. ####

SHELL		= /bin/sh
@SET_MAKE@

PROG		= $(THIS)$x

LDFLAGS		= @LDFLAGS@

DOC_FILES = \
	README \
	CHANGES \
	$(THIS).1

MAK_FILES = \
	Makefile.in \
	configure.in \
	aclocal.m4 \
	config_h.in

H_FILES = \
	yyerror.c \
	system.h \
	$(THIS).h \
	semantic.h \
	symbol.h

C_FILES = \
	$(THIS).c \
	lintlibs.c \
	semantic.c \
	strkey.c \
	symbol.c

AUX_FILES = \
	mkdirs.sh \
	lex.l \
	grammar.y

JUNK =	\
	lex.yy.c \
	y.tab.c

EXTRA_OBJS = @EXTRA_OBJS@
OBJECTS = $(THIS)$o lintlibs$o semantic$o strkey$o symbol$o y.tab$o \
	$(EXTRA_OBJS)
SOURCES = $(DOC_FILES) $(MAK_FILES) $(H_FILES) $(C_FILES) $(AUX_FILES)

all : $(PROG) # $(THIS).man

install: all installdirs
	$(INSTALL_PROGRAM) $(PROG) $(bindir)/$(PROG)
	- $(INSTALL_DATA) $(srcdir)/$(THIS).1 $(mandir)/$(THIS).$(manext)

installdirs:
	$(SHELL) ${srcdir}/mkdirs.sh $(bindir)
	- $(SHELL) ${srcdir}/mkdirs.sh $(mandir)

uninstall:
	- rm -f $(bindir)/$(PROG) $(mandir)/$(THIS).$(manext)

.c$o:
	@RULE_CC@
	@ECHO_CC@$(CC) -c $(CFLAGS) $<

$(PROG) : $(OBJECTS)
	@ECHO_LD@$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $(OBJECTS) $(LIBS)

y.tab.c : grammar.y
	$(YACC) $(srcdir)/grammar.y

lex.yy.c : lex.l
	$(LEX) $(srcdir)/lex.l

$(THIS).man : $(THIS).1
	- nroff -man $(srcdir)/$(THIS).1 >$@

mostlyclean :
	- rm -f core .nfs* *$o *.bak *.BAK *.man *.out $(JUNK) default.h

clean : mostlyclean
	- rm -f $(PROG)
	- cd $(srcdir)/testing && $(MAKE) $@

distclean : clean
	- rm -f config.log config.cache config.status config.h Makefile
	- rm -f .version .fname
	- cd $(srcdir)/testing && $(MAKE) $@

realclean: distclean
	- rm -f tags
	- cd $(srcdir)/testing && $(MAKE) $@

check:	$(PROG)
	cd $(srcdir)/testing && $(MAKE) run_test

# I keep my sources in RCS, and assign a symbolic release to the current patch
# level.  The 'manifest' script knows how to build a list of files for a given
# revision -TD
MANIFEST:
	manifest -rv$(RELEASE) \
		$(THIS).man \
		$(srcdir)/testing/case*.dcl \
		$(srcdir)/testing/case*.bat

dist: MANIFEST
	- rm -f .fname .files
	echo '$(THIS)-$(RELEASE)' >.fname
	cat MANIFEST | grep ' ' | egrep -v ' subdirectory$$' | sed -e 's/\ .*//' | uniq >.files
	rm -rf `cat .fname`
	TOP=`cat .fname`; mkdir $$TOP `cat .files | grep / | sed -e 's@/.*@@' | sed -e s@\^@$$TOP/@ | uniq`
	for file in `cat .files`; do \
	  ln $(srcdir)/$$file `cat .fname`/$$file \
	    || { echo copying $$file instead; cp $$file `cat .fname`/$$file; }; \
	done
	tar -cf - `cat .fname` | gzip >`cat .fname`.tgz
	rm -rf `cat .fname` .fname .files

default.h: $(C_FILES) lex.yy.c
	./$(PROG) -e -v -m -M ARGS -d $(DEFINES) $(C_FILES) grammar.y >$@

lint: $(C_FILES) $(JUNK)
	$(LINT) $(CPPFLAGS) -lyacc $(C_FILES) y.tab.c >$@.out

llib: $(C_FILES) $(JUNK)
	./$(PROG) -l $(CPPFLAGS) $(C_FILES) y.tab.c >$@.out

self: $(C_FILES) $(JUNK)
	./$(PROG) $(CPPFLAGS) $(C_FILES) y.tab.c >$@.out

tags: $(H_FILES) $(C_FILES) $(AUX_FILES)
	ctags $(C_FILES) $(AUX_FILES) $(H_FILES)

depend:
	makedepend -- $(CPPFLAGS) -- $(C_FILES) y.tab.c

# DO NOT DELETE THIS LINE -- make depend depends on it.

cproto$o   : cproto.h config.h system.h
lintlibs$o : cproto.h config.h system.h semantic.h symbol.h
semantic$o : cproto.h config.h system.h semantic.h
strkey$o   : cproto.h config.h system.h 
symbol$o   : cproto.h config.h system.h symbol.h
y.tab$o	   : cproto.h config.h system.h symbol.h semantic.h lex.yy.c yyerror.c
